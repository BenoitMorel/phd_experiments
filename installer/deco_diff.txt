--- ./DeCo/Reconcil.cpp	2019-04-25 17:09:35.298932601 +0200
+++ ./refDeCo/Reconcil.cpp	2012-07-11 12:02:04.000000000 +0200
@@ -64,53 +64,54 @@
 //Utilisé sur l'arbre des espèces uniquement
 void nommerNoeudsInternes(Node * n)
 {
-  convert<int> C;
-  n->setNodeProperty(esp, BppString(C.to_s(n->getId())));
-  if (n->isLeaf())
-  {
-    n->setDistanceToFather(1);
-  }
-  else
-  {
-    if (n->hasFather())
-      n->setDistanceToFather(1);
-    if (n->hasBranchProperty(esp))
-    {
-      BppString * Nom = dynamic_cast<BppString*> (n->getBranchProperty(esp));
-      n->setName(Nom->toSTL());
-    }
-      //cout<<"From Reconcil.cpp (nommerNoeudsInternes): node with no name !!!"<<endl;
-      nommerNoeudsInternes((n->getSons())[0]);
-    nommerNoeudsInternes((n->getSons())[1]);
-  }
+   convert<int> C;
+   n->setNodeProperty(esp, BppString(C.to_s(n->getId())));
+   if (n->isLeaf())
+      {
+	 n->setDistanceToFather(1);
+      }
+   else
+      {
+	 if (n->hasFather())
+	    n->setDistanceToFather(1);
+	 if (n->hasBranchProperty(esp))
+	    {
+	       BppString * Nom = dynamic_cast<BppString*> (n->getBranchProperty(esp));
+	       n->setName(Nom->toSTL());
+	    }
+	 else
+	    //cout<<"From Reconcil.cpp (nommerNoeudsInternes): node with no name !!!"<<endl;
+	 nommerNoeudsInternes((n->getSons())[0]);
+	 nommerNoeudsInternes((n->getSons())[1]);
+      }
 }
 
 //À n'utiliser que si arbre au format Newick a priori
 void affecteInfoSurBrancheNoeud(Node * n)
 {
-  convert<int> C;
-  string prop;
-
-  prop+="Id";
-  prop+=C.to_s(n->getId());
-  prop+=sep;
-
-  if (n->hasName())
-    prop+=n->getName();
-  else
-    prop+="NONAME";
-  prop+=sep;
-
-  prop+="E";
-  if (n->hasNodeProperty(esp))
-  {
-    BppString * espece = dynamic_cast<BppString*> (n->getNodeProperty(esp));
-    prop+=espece->toSTL();
-  }
-  else
-    prop+="NOSPECIE";
-  prop+=sep;
-
+   convert<int> C;
+   string prop;
+   
+   prop+="Id";
+   prop+=C.to_s(n->getId());
+   prop+=sep;
+   
+   if (n->hasName())
+      prop+=n->getName();
+   else
+      prop+="NONAME";
+   prop+=sep;
+   
+   prop+="E";
+   if (n->hasNodeProperty(esp))
+      {
+	 BppString * espece = dynamic_cast<BppString*> (n->getNodeProperty(esp));
+	 prop+=espece->toSTL();
+      }
+   else
+      prop+="NOSPECIE";
+   prop+=sep;
+   
    if (n->hasBranchProperty(typ))
       {
 	 BppString * type = dynamic_cast<BppString*> (n->getBranchProperty(typ));
@@ -399,12 +400,7 @@
    p_G->setId(id);id++;
    p_G->setBranchProperty(typ,BppString(per));
    p_G->setBranchProperty("D", BppString("?"));
-   try {
-     x_S->getSon(0)->getNodeProperty(esp);
-   } catch(...) {
-     cerr << "error with id " <<  x_S->getSon(0)->getId() << endl;
-   }
-
+   
    BppString * EspeceFils1 = dynamic_cast<BppString*> (x_S->getSon(1)->getNodeProperty(esp));
    BppString * EspeceF_G = dynamic_cast <BppString*> (f_G->getNodeProperty(esp));
    BppString * EspeceFils0 = dynamic_cast<BppString*> (x_S->getSon(0)->getNodeProperty(esp));
@@ -464,7 +460,7 @@
 	 Node * fd = n->getSon(1);
 	 ajoutePerte(fg,id,S);//Normalement id est modifiée à l'issue de cet appel
 	 ajoutePerte(fd,id,S);
-
+	 
 	 BppString * EspeceN = dynamic_cast<BppString*> (n->getNodeProperty(esp));
 	 Node * NoeudEspN = S->getNode(C.from_s(EspeceN->toSTL()));
 	 BppString * typeN = dynamic_cast<BppString*> (n->getBranchProperty(typ));
@@ -540,34 +536,14 @@
       }
 }
 
-void check(Node *g) {
-  if (g->getId() == 20) {
-    cerr << "THE NODE " <<  g->getId() << " " << g->isLeaf() << " " << (g->hasName() ? g->getName() : string("noname")) << endl;
-  }
-  if (! g->hasNodeProperty(esp)) {
-    convert<int> C;
-    if (g->isLeaf()) {
-      cerr << g->getId() << " ";
-      cerr << g->getName() << endl;
-    }
-    //g->setNodeProperty(esp, BppString(C.to_s(g->getId())));
-  }
-  if (g->getNumberOfSons() > 0) {
-    check(g->getSon(0));
-    check(g->getSon(1));
-  }
-
-
-}
 
 void reconcil(TreeTemplate<Node >* S,TreeTemplate<Node >* G)
 {
-    nommerNoeudsInternes(S->getRootNode()); 
-    //check(S->getRootNode());
-    //
+   //
    // 1/ À chaque noeud de l'arbre de gène, on attribue un noeud de l'abre des espèces. 
    //
    preAffecteEspece(G->getRootNode(), G, S);
+   
    if (G->getRootNode()->getNumberOfSons()>0)
       {
 	 //Suite à l'éventuel élagage de G on renumérote tout pour éviter
